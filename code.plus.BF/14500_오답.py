import sys

N, M = map(int, sys.stdin.readline().split())

maps = [[0] * M for _ in range(N)]

for n in range(N):
    maps_list = list(map(int, sys.stdin.readline().split()))
    
    for m in range(M):
        maps[n][m] = maps_list[m]

max = 0 # 비교 기준 최댓값

tetromino = [ # 각 테트로미노의 연산 방향을 저장한 리스트
    [(0, 0), (0, 1), (0, 2), (0, 3)], # 세로 네 개
    [(0, 0), (1, 0), (2, 0), (3, 0)], # 가로 네 개
    [(0, 0), (0, 1), (1, 0), (1, 1)], # 정사각형
    [(0, 0), (1, 0), (2, 0), (2, 1)], # 니은자
    [(0, 0), (1, 0), (2, 0), (2, -1)], # 반대 니은
    [(0, 0), (0, 1), (1, 0), (2, 0)], # 반대 기역
    [(0, 0), (0, 1), (1, 1), (2, 1)], # 기역
    [(0, 0), (0, 1), (0, 2), (-1, 2)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 1)], # ㅜ
    [(0, 0), (1, 0), (2, 0), (1, 1)], # ㅏ
    [(0, 0), (-1, 1), (0, 1), (1, 1)], # ㅓ
    [(0, 0), (0, 1), (0, 2), (-1, 1)], # ㅗ
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(0, 0), (1, 0), (1, -1), (2, -1)],
    [(0, 0), (0, 1), (-1, 1), (-1, 2)],
    [(0, 0), (0, 1), (1, 1), (1, 2)]
]

# 주어진 종이에서 전체 좌표에 대해 연산
for n in range(N):
    for m in range(M):
        # 테트로미노의 모든 경우의 수 계산
        for t in tetromino: # t: 방향이 저장된 리스트
            s_list = [] # 테트로미노가 가리는 칸의 좌표를 저장하는 리스트
            for i in range(4):
                s_list.append((n + t[i][0], m + t[i][1]))
            
            sum = 0
            # 테트로미노가 가리는 칸의 숫자 총합 계산
            for s in s_list:
                # 네모칸 안에 있을 때만
                if 0 <= s[0] < N and 0 <= s[1] < M:
                    sum += maps[s[0]][s[1]]
            
            if sum > max:
                max = sum

print(max)